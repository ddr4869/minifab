// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/orderer/orderer.proto

package orderer

import (
	context "context"
	common "github.com/ddr4869/minifab/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrdererService_CreateChannel_FullMethodName = "/orderer.OrdererService/CreateChannel"
)

// OrdererServiceClient is the client API for OrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdererServiceClient interface {
	CreateChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, BroadcastResponse], error)
}

type ordererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdererServiceClient(cc grpc.ClientConnInterface) OrdererServiceClient {
	return &ordererServiceClient{cc}
}

func (c *ordererServiceClient) CreateChannel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, BroadcastResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OrdererService_ServiceDesc.Streams[0], OrdererService_CreateChannel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, BroadcastResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrdererService_CreateChannelClient = grpc.BidiStreamingClient[common.Envelope, BroadcastResponse]

// OrdererServiceServer is the server API for OrdererService service.
// All implementations must embed UnimplementedOrdererServiceServer
// for forward compatibility.
type OrdererServiceServer interface {
	CreateChannel(grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]) error
	mustEmbedUnimplementedOrdererServiceServer()
}

// UnimplementedOrdererServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrdererServiceServer struct{}

func (UnimplementedOrdererServiceServer) CreateChannel(grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]) error {
	return status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedOrdererServiceServer) mustEmbedUnimplementedOrdererServiceServer() {}
func (UnimplementedOrdererServiceServer) testEmbeddedByValue()                        {}

// UnsafeOrdererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdererServiceServer will
// result in compilation errors.
type UnsafeOrdererServiceServer interface {
	mustEmbedUnimplementedOrdererServiceServer()
}

func RegisterOrdererServiceServer(s grpc.ServiceRegistrar, srv OrdererServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrdererServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrdererService_ServiceDesc, srv)
}

func _OrdererService_CreateChannel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OrdererServiceServer).CreateChannel(&grpc.GenericServerStream[common.Envelope, BroadcastResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OrdererService_CreateChannelServer = grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]

// OrdererService_ServiceDesc is the grpc.ServiceDesc for OrdererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.OrdererService",
	HandlerType: (*OrdererServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateChannel",
			Handler:       _OrdererService_CreateChannel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/orderer/orderer.proto",
}
