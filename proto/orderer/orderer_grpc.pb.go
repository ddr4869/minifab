// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/orderer/orderer.proto

package orderer

import (
	context "context"
	common "github.com/ddr4869/minifab/proto/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OrdererService_BootstrapNetwork_FullMethodName = "/orderer.OrdererService/BootstrapNetwork"
	OrdererService_SubmitBlock_FullMethodName      = "/orderer.OrdererService/SubmitBlock"
	OrdererService_GetBlock_FullMethodName         = "/orderer.OrdererService/GetBlock"
	OrdererService_CreateChannel_FullMethodName    = "/orderer.OrdererService/CreateChannel"
	OrdererService_GetChannelInfo_FullMethodName   = "/orderer.OrdererService/GetChannelInfo"
	OrdererService_GetOrdererStatus_FullMethodName = "/orderer.OrdererService/GetOrdererStatus"
)

// OrdererServiceClient is the client API for OrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// OrdererService - Orderer 노드 서비스
type OrdererServiceClient interface {
	// 제네시스 블록 생성 및 부트스트랩
	BootstrapNetwork(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error)
	// 블록 관련
	SubmitBlock(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*BlockResponse, error)
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*common.Block, error)
	// 채널 관련
	CreateChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error)
	GetChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error)
	// 상태 확인
	GetOrdererStatus(ctx context.Context, in *OrdererStatusRequest, opts ...grpc.CallOption) (*OrdererStatusResponse, error)
}

type ordererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdererServiceClient(cc grpc.ClientConnInterface) OrdererServiceClient {
	return &ordererServiceClient{cc}
}

func (c *ordererServiceClient) BootstrapNetwork(ctx context.Context, in *BootstrapRequest, opts ...grpc.CallOption) (*BootstrapResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BootstrapResponse)
	err := c.cc.Invoke(ctx, OrdererService_BootstrapNetwork_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) SubmitBlock(ctx context.Context, in *common.Envelope, opts ...grpc.CallOption) (*BlockResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BlockResponse)
	err := c.cc.Invoke(ctx, OrdererService_SubmitBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*common.Block, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(common.Block)
	err := c.cc.Invoke(ctx, OrdererService_GetBlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) CreateChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelResponse)
	err := c.cc.Invoke(ctx, OrdererService_CreateChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) GetChannelInfo(ctx context.Context, in *ChannelInfoRequest, opts ...grpc.CallOption) (*ChannelInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelInfoResponse)
	err := c.cc.Invoke(ctx, OrdererService_GetChannelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) GetOrdererStatus(ctx context.Context, in *OrdererStatusRequest, opts ...grpc.CallOption) (*OrdererStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrdererStatusResponse)
	err := c.cc.Invoke(ctx, OrdererService_GetOrdererStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdererServiceServer is the server API for OrdererService service.
// All implementations must embed UnimplementedOrdererServiceServer
// for forward compatibility.
//
// OrdererService - Orderer 노드 서비스
type OrdererServiceServer interface {
	// 제네시스 블록 생성 및 부트스트랩
	BootstrapNetwork(context.Context, *BootstrapRequest) (*BootstrapResponse, error)
	// 블록 관련
	SubmitBlock(context.Context, *common.Envelope) (*BlockResponse, error)
	GetBlock(context.Context, *BlockRequest) (*common.Block, error)
	// 채널 관련
	CreateChannel(context.Context, *ChannelRequest) (*ChannelResponse, error)
	GetChannelInfo(context.Context, *ChannelInfoRequest) (*ChannelInfoResponse, error)
	// 상태 확인
	GetOrdererStatus(context.Context, *OrdererStatusRequest) (*OrdererStatusResponse, error)
	mustEmbedUnimplementedOrdererServiceServer()
}

// UnimplementedOrdererServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOrdererServiceServer struct{}

func (UnimplementedOrdererServiceServer) BootstrapNetwork(context.Context, *BootstrapRequest) (*BootstrapResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BootstrapNetwork not implemented")
}
func (UnimplementedOrdererServiceServer) SubmitBlock(context.Context, *common.Envelope) (*BlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitBlock not implemented")
}
func (UnimplementedOrdererServiceServer) GetBlock(context.Context, *BlockRequest) (*common.Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedOrdererServiceServer) CreateChannel(context.Context, *ChannelRequest) (*ChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedOrdererServiceServer) GetChannelInfo(context.Context, *ChannelInfoRequest) (*ChannelInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelInfo not implemented")
}
func (UnimplementedOrdererServiceServer) GetOrdererStatus(context.Context, *OrdererStatusRequest) (*OrdererStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrdererStatus not implemented")
}
func (UnimplementedOrdererServiceServer) mustEmbedUnimplementedOrdererServiceServer() {}
func (UnimplementedOrdererServiceServer) testEmbeddedByValue()                        {}

// UnsafeOrdererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdererServiceServer will
// result in compilation errors.
type UnsafeOrdererServiceServer interface {
	mustEmbedUnimplementedOrdererServiceServer()
}

func RegisterOrdererServiceServer(s grpc.ServiceRegistrar, srv OrdererServiceServer) {
	// If the following call pancis, it indicates UnimplementedOrdererServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OrdererService_ServiceDesc, srv)
}

func _OrdererService_BootstrapNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BootstrapRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).BootstrapNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_BootstrapNetwork_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).BootstrapNetwork(ctx, req.(*BootstrapRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_SubmitBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(common.Envelope)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).SubmitBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_SubmitBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).SubmitBlock(ctx, req.(*common.Envelope))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_GetBlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_CreateChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).CreateChannel(ctx, req.(*ChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_GetChannelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).GetChannelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_GetChannelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).GetChannelInfo(ctx, req.(*ChannelInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_GetOrdererStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrdererStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).GetOrdererStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OrdererService_GetOrdererStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).GetOrdererStatus(ctx, req.(*OrdererStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdererService_ServiceDesc is the grpc.ServiceDesc for OrdererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.OrdererService",
	HandlerType: (*OrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BootstrapNetwork",
			Handler:    _OrdererService_BootstrapNetwork_Handler,
		},
		{
			MethodName: "SubmitBlock",
			Handler:    _OrdererService_SubmitBlock_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _OrdererService_GetBlock_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _OrdererService_CreateChannel_Handler,
		},
		{
			MethodName: "GetChannelInfo",
			Handler:    _OrdererService_GetChannelInfo_Handler,
		},
		{
			MethodName: "GetOrdererStatus",
			Handler:    _OrdererService_GetOrdererStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/orderer/orderer.proto",
}
