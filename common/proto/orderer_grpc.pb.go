// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: common/proto/orderer.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OrdererServiceClient is the client API for OrdererService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OrdererServiceClient interface {
	SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error)
	GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error)
	CreateChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error)
}

type ordererServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrdererServiceClient(cc grpc.ClientConnInterface) OrdererServiceClient {
	return &ordererServiceClient{cc}
}

func (c *ordererServiceClient) SubmitTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*TransactionResponse, error) {
	out := new(TransactionResponse)
	err := c.cc.Invoke(ctx, "/orderer.OrdererService/SubmitTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) GetBlock(ctx context.Context, in *BlockRequest, opts ...grpc.CallOption) (*Block, error) {
	out := new(Block)
	err := c.cc.Invoke(ctx, "/orderer.OrdererService/GetBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ordererServiceClient) CreateChannel(ctx context.Context, in *ChannelRequest, opts ...grpc.CallOption) (*ChannelResponse, error) {
	out := new(ChannelResponse)
	err := c.cc.Invoke(ctx, "/orderer.OrdererService/CreateChannel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrdererServiceServer is the server API for OrdererService service.
// All implementations must embed UnimplementedOrdererServiceServer
// for forward compatibility
type OrdererServiceServer interface {
	SubmitTransaction(context.Context, *Transaction) (*TransactionResponse, error)
	GetBlock(context.Context, *BlockRequest) (*Block, error)
	CreateChannel(context.Context, *ChannelRequest) (*ChannelResponse, error)
	mustEmbedUnimplementedOrdererServiceServer()
}

// UnimplementedOrdererServiceServer must be embedded to have forward compatible implementations.
type UnimplementedOrdererServiceServer struct {
}

func (UnimplementedOrdererServiceServer) SubmitTransaction(context.Context, *Transaction) (*TransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTransaction not implemented")
}
func (UnimplementedOrdererServiceServer) GetBlock(context.Context, *BlockRequest) (*Block, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlock not implemented")
}
func (UnimplementedOrdererServiceServer) CreateChannel(context.Context, *ChannelRequest) (*ChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateChannel not implemented")
}
func (UnimplementedOrdererServiceServer) mustEmbedUnimplementedOrdererServiceServer() {}

// UnsafeOrdererServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OrdererServiceServer will
// result in compilation errors.
type UnsafeOrdererServiceServer interface {
	mustEmbedUnimplementedOrdererServiceServer()
}

func RegisterOrdererServiceServer(s grpc.ServiceRegistrar, srv OrdererServiceServer) {
	s.RegisterService(&OrdererService_ServiceDesc, srv)
}

func _OrdererService_SubmitTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).SubmitTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.OrdererService/SubmitTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).SubmitTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_GetBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).GetBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.OrdererService/GetBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).GetBlock(ctx, req.(*BlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OrdererService_CreateChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrdererServiceServer).CreateChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/orderer.OrdererService/CreateChannel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrdererServiceServer).CreateChannel(ctx, req.(*ChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OrdererService_ServiceDesc is the grpc.ServiceDesc for OrdererService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OrdererService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.OrdererService",
	HandlerType: (*OrdererServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitTransaction",
			Handler:    _OrdererService_SubmitTransaction_Handler,
		},
		{
			MethodName: "GetBlock",
			Handler:    _OrdererService_GetBlock_Handler,
		},
		{
			MethodName: "CreateChannel",
			Handler:    _OrdererService_CreateChannel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "common/proto/orderer.proto",
}
